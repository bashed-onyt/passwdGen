#!/bin/bash

##########################
# generate random passwd #
# and print to stdout    #
##########################




# common script declarations
ProgName="${0##*/}"
Version="1.002"
CreationDate="2022-02-25"
VersionDate="2022-03-19"
Author="BasheD"
Description="Generate random password"
Pid="$$"




# Functions ->

# Usage: scriptUsage(exit_code)
#
#  @@Input:
#    exit_code (optional)
#    = integer
#
#  @@Output:
#    print <stdout>
#    = message string
#
#  @@Returns:
#    none
#
#  @@Notes:
#    always exits
#
#
scriptUsage()
{
    echo
    echo "  $ProgName <-l password_length>"
    echo
    echo "    -l <password_length>    Must be an integer between 8 & 24"
    echo "    -h                      Print this help message"
    echo

    # if exit code was provided use that otherwise exit 0
    exit "${1:-0}"
}


# Usage: getNumber()
#
#  @@Input:
#    none
#
#  @@Output:
#    print <stdout>
#    = integer
#
#  @@Returns:
#    none
#
#  @@Notes:
#    none
#
getNumber()
{
    shuf --input-range=1-36 --head-count=1
}

# Functions -|




# CLI Arguments ->

  while getopts ":l:h" opt
    do
      case "$opt" in
        l)  if (( $OPTARG >= 8 )) && (( $OPTARG <= 24 ))
              then
                PASSWD_LENGTH="$OPTARG"
              else
                echo "    ** Invalid value for password length [ $OPTARG ] **" >&2
                scriptUsage 1
            fi
        ;;

        h)  scriptUsage
        ;;

       \?)  echo "    ** Invalid option [ $OPTARG ] **" >&2
            scriptUsage 1
        ;;

        :)  echo "    ** Missing argument for $OPTARG **" >&2
            scriptUsage 1
        ;;
      esac
  done

  # not required in this usage but a good practice to include anyways
  shift $((OPTIND-1))

  unset opt

  # verify required flags/arguments
  case "${PASSWD_LENGTH:+SET}" in
    "SET")  # nothing to see here
        ;;

        *)  echo "    ** Missing required password length parameter **" >&2
            scriptUsage 1
        ;;
  esac

# CLI Arguments -|




# Declarations ->

  RAND_NUMBER=""
  NEW_LETTER=""
  OUTPUT_PASSWD=""

# Declarations -|



# Main () ->

    # repeat until OUTPUT_PASSWD contains PASSWD_LENGTH characters
    for (( x=1; x<="$PASSWD_LENGTH"; x++ ))
      do
        # generate random numbers and store result in RAND_NUMBER
        RAND_NUMBER=$(getNumber)

        # convert RAND_NUMBER to letter and store letter in NEW_LETTER
        case "$RAND_NUMBER" in
          1 )  NEW_LETTER="a";;
          2 )  NEW_LETTER="b";;
          3 )  NEW_LETTER="c";;
          4 )  NEW_LETTER="d";;
          5 )  NEW_LETTER="e";;
          6 )  NEW_LETTER="f";;
          7 )  NEW_LETTER="g";;
          8 )  NEW_LETTER="h";;
          9 )  NEW_LETTER="i";;
          10)  NEW_LETTER="j";;
          11)  NEW_LETTER="k";;
          12)  NEW_LETTER="l";;
          13)  NEW_LETTER="m";;
          14)  NEW_LETTER="n";;
          15)  NEW_LETTER="o";;
          16)  NEW_LETTER="p";;
          17)  NEW_LETTER="q";;
          18)  NEW_LETTER="r";;
          19)  NEW_LETTER="s";;
          20)  NEW_LETTER="t";;
          21)  NEW_LETTER="u";;
          22)  NEW_LETTER="v";;
          23)  NEW_LETTER="w";;
          24)  NEW_LETTER="x";;
          25)  NEW_LETTER="y";;
          26)  NEW_LETTER="z";;
          27)  NEW_LETTER="0";;
          28)  NEW_LETTER="1";;
          29)  NEW_LETTER="2";;
          30)  NEW_LETTER="3";;
          31)  NEW_LETTER="4";;
          32)  NEW_LETTER="5";;
          33)  NEW_LETTER="6";;
          34)  NEW_LETTER="7";;
          35)  NEW_LETTER="8";;
          36)  NEW_LETTER="9";;
        esac

        # add random upper case letters
        # shuf generates one number between 1 & 36 which is divided (modulus) by 2
        # if the remainder is 0 then the number is even, so make the currently selecting NEW_LETTER upper case
        # has no effect on NEW_LETTER if NEW_LETTER is numeric
        if (( $(( $(getNumber) % 2 )) == 0 ))
          then
            # add upper case NEW_LETTER to OUTPUT_PASSWD
            OUTPUT_PASSWD="${OUTPUT_PASSWD}${NEW_LETTER^}"
          else
            # add NEW_LETTER to OUTPUT_PASSWD
            OUTPUT_PASSWD="${OUTPUT_PASSWD}$NEW_LETTER"
        fi
    done

    # print final OUTPUT_PASSWD
    echo "$OUTPUT_PASSWD"

# Main () -|

